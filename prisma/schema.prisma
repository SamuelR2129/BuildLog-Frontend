// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model BuildSite {
    id        String   @id @default(uuid())
    userId    String
    createdAt DateTime @default(now())
    buildSite String 
    updatedAt         DateTime? @updatedAt  
    @@index([id])
    @@unique([createdAt, id])
}

model Subbie {
    id        String   @id @default(uuid())
    userId    String
    createdAt DateTime @default(now())
    subbieName String 
    updatedAt         DateTime? @updatedAt  
    @@index([id])
    @@unique([createdAt, id])
}

model SubbieEntry {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    hours     String   
    costs     String   
    name      String   
    userId    String
    @@index([id])
    @@unique([createdAt, id])
}

model Tweet {
    id        String   @id @default(uuid())
    userId    String
    content   String?
    createdAt DateTime @default(now())
    hours     String?   
    costs     String?   
    buildSite String?  
    imageNames String?

    user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@unique([createdAt, id])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String   @unique
    createdAt     DateTime @default(now()) 
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    //non-next auth
    tweets         Tweet[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

